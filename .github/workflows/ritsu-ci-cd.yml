name: Ritsu AI Complete Test, Fix & Build Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip testing phase'
        required: false
        default: false
        type: boolean

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx6g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError"
  ANDROID_COMPILE_SDK: "34"
  ANDROID_BUILD_TOOLS: "34.0.0"
  ANDROID_SDK_TOOLS: "8512546"
  MIN_COVERAGE: 70

jobs:
  # ============================================================================
  # COMPLETE PIPELINE: TEST, FIX, COMPILE
  # ============================================================================
  complete-pipeline:
    name: Complete Test, Fix & Build Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    # ------------------------------------------------------------------------
    # SETUP & ENVIRONMENT
    # ------------------------------------------------------------------------
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: gradle

    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        cmake: '3.22.1'
        ndk: '25.2.9519653'

    - name: 🐍 Setup Python for AI Testing
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: 📦 Install AI Testing Dependencies
      run: |
        pip install --upgrade pip
        pip install onnxruntime numpy torch transformers
        pip install speechrecognition pyaudio
        echo "AI testing dependencies installed"

    - name: 🔧 Grant Execute Permission for Gradlew
      run: chmod +x gradlew

    - name: 📋 Environment Information
      run: |
        echo "🔍 Environment Information:"
        echo "Java Version: $(java -version 2>&1 | head -1)"
        echo "Android SDK: $ANDROID_HOME"
        echo "Gradle Version: $(./gradlew --version | grep Gradle)"
        echo "Available Memory: $(free -h)"
        echo "CPU Info: $(nproc) cores"
        echo "Force Rebuild: ${{ github.event.inputs.force_rebuild }}"
        echo "Skip Tests: ${{ github.event.inputs.skip_tests }}"

    # ------------------------------------------------------------------------
    # PROJECT STRUCTURE VALIDATION & AUTO-FIX
    # ------------------------------------------------------------------------
    - name: 🔍 Validate & Fix Project Structure
      run: |
        echo "🔍 Validating Ritsu AI project structure..."
        
        # Check for essential Android files
        REQUIRED_FILES=(
          "app/build.gradle"
          "app/src/main/AndroidManifest.xml"
          "gradle.properties"
          "settings.gradle"
        )
        
        MISSING_FILES=()
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            MISSING_FILES+=("$file")
            echo "❌ Missing: $file"
          else
            echo "✅ Found: $file"
          fi
        done
        
        # Auto-create missing build.gradle if needed
        if [ ! -f "app/build.gradle" ]; then
          echo "🔧 Creating basic build.gradle..."
          mkdir -p app
          cat > app/build.gradle << 'EOF'
        plugins {
            id 'com.android.application'
            id 'org.jetbrains.kotlin.android'
        }
        
        android {
            namespace 'com.ritsu.ai.assistant'
            compileSdk 34
        
            defaultConfig {
                applicationId "com.ritsu.ai.assistant"
                minSdk 26
                targetSdk 34
                versionCode 1
                versionName "1.0"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }
        
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            kotlinOptions {
                jvmTarget = '17'
            }
        }
        
        dependencies {
            implementation 'androidx.core:core-ktx:1.12.0'
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'com.google.android.material:material:1.11.0'
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF
        fi
        
        # Auto-create basic AndroidManifest.xml if missing
        if [ ! -f "app/src/main/AndroidManifest.xml" ]; then
          echo "🔧 Creating basic AndroidManifest.xml..."
          mkdir -p app/src/main
          cat > app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            <uses-permission android:name="android.permission.RECORD_AUDIO" />
            <uses-permission android:name="android.permission.CALL_PHONE" />
            <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
            <uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE" />
            
            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="Ritsu AI Assistant"
                android:theme="@style/Theme.AppCompat">
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        EOF
        fi
        
        # Create settings.gradle if missing
        if [ ! -f "settings.gradle" ]; then
          echo "🔧 Creating settings.gradle..."
          cat > settings.gradle << 'EOF'
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }
        rootProject.name = "Ritsu AI Assistant"
        include ':app'
        EOF
        fi
        
        # Create gradle.properties if missing
        if [ ! -f "gradle.properties" ]; then
          echo "🔧 Creating gradle.properties..."
          cat > gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        kotlin.code.style=official
        android.nonTransitiveRClass=true
        EOF
        fi
        
        # Create basic MainActivity if missing
        if [ ! -f "app/src/main/java/com/ritsu/ai/assistant/MainActivity.kt" ]; then
          echo "🔧 Creating basic MainActivity..."
          mkdir -p app/src/main/java/com/ritsu/ai/assistant
          cat > app/src/main/java/com/ritsu/ai/assistant/MainActivity.kt << 'EOF'
        package com.ritsu.ai.assistant
        
        import android.os.Bundle
        import androidx.appcompat.app.AppCompatActivity
        
        class MainActivity : AppCompatActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                // TODO: Implement Ritsu AI Assistant UI
            }
        }
        EOF
        fi
        
        echo "✅ Project structure validation and auto-fix completed"

    # ------------------------------------------------------------------------
    # GRADLE SYNC & DEPENDENCIES
    # ------------------------------------------------------------------------
    - name: 🔄 Gradle Sync & Dependencies Check
      run: |
        echo "🔄 Running Gradle sync..."
        ./gradlew clean --no-daemon
        
        echo "📦 Checking dependencies..."
        ./gradlew dependencies --no-daemon || {
          echo "⚠️ Dependency issues detected, attempting to resolve..."
          
          # Try to fix common dependency issues
          if grep -q "compileSdkVersion" app/build.gradle; then
            sed -i 's/compileSdkVersion.*/compileSdk 34/' app/build.gradle
          fi
          
          if grep -q "targetSdkVersion" app/build.gradle; then
            sed -i 's/targetSdkVersion.*/targetSdk 34/' app/build.gradle
          fi
          
          # Retry after fixes
          ./gradlew dependencies --no-daemon
        }
        
        echo "✅ Gradle sync completed"

    # ------------------------------------------------------------------------
    # CODE QUALITY & LINTING
    # ------------------------------------------------------------------------
    - name: 🔍 Code Quality Analysis
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        echo "🔍 Running code quality checks..."
        
        # Android Lint
        echo "📱 Running Android Lint..."
        ./gradlew lintDebug --no-daemon || {
          echo "⚠️ Lint issues found, generating report..."
          if [ -f "app/build/reports/lint-results-debug.html" ]; then
            echo "Lint report generated: app/build/reports/lint-results-debug.html"
          fi
        }
        
        # Check for common issues
        echo "🔍 Checking for common Android issues..."
        
        # Check for hardcoded strings
        if grep -r "android:text=\"[^@]" app/src/main/res/ 2>/dev/null; then
          echo "⚠️ Hardcoded strings found - should use string resources"
        fi
        
        # Check for missing content descriptions
        if grep -r "ImageView\|ImageButton" app/src/main/res/ 2>/dev/null; then
          echo "📱 Found ImageViews - checking content descriptions..."
          if ! grep -r "contentDescription" app/src/main/res/ 2>/dev/null; then
            echo "⚠️ Missing content descriptions for accessibility"
          fi
        fi
        
        echo "✅ Code quality analysis completed"

    # ------------------------------------------------------------------------
    # AI MODELS VALIDATION
    # ------------------------------------------------------------------------
    - name: 🤖 AI Models Validation
      run: |
        echo "🤖 Validating AI components..."
        
        # Check for AI model directories
        AI_DIRS=("app/src/main/assets/models" "assets/models" "app/assets/models")
        
        for dir in "${AI_DIRS[@]}"; do
          if [ -d "$dir" ]; then
            echo "📂 Found AI models directory: $dir"
            
            # Validate ONNX models if present
            find "$dir" -name "*.onnx" | while read model; do
              echo "🔍 Validating model: $(basename $model)"
              python3 -c "
        import onnxruntime as ort
        import sys
        try:
            session = ort.InferenceSession('$model')
            print('✅ Model $(basename $model) is valid')
            print(f'  - Inputs: {[input.name for input in session.get_inputs()]}')
            print(f'  - Outputs: {[output.name for output in session.get_outputs()]}')
        except Exception as e:
            print('❌ Model $(basename $model) validation failed: {e}')
            sys.exit(1)
              " || echo "⚠️ Could not validate model: $(basename $model)"
            done
            
            # Check for TensorFlow Lite models
            find "$dir" -name "*.tflite" | while read model; do
              echo "📱 Found TensorFlow Lite model: $(basename $model)"
            done
          fi
        done
        
        # Test basic TTS functionality
        echo "🗣️ Testing Text-to-Speech components..."
        python3 -c "
        import subprocess
        import sys
        try:
            # Test if espeak is available
            result = subprocess.run(['which', 'espeak'], capture_output=True)
            if result.returncode == 0:
                print('✅ eSpeak TTS available')
            else:
                print('⚠️ eSpeak TTS not found - will use Android TTS')
        except Exception as e:
            print('⚠️ TTS test failed:', e)
        "
        
        echo "✅ AI models validation completed"

    # ------------------------------------------------------------------------
    # UNIT TESTS
    # ------------------------------------------------------------------------
    - name: 🧪 Unit Tests
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        echo "🧪 Running unit tests..."
        
        # Create basic test if none exist
        if [ ! -d "app/src/test" ]; then
          echo "🔧 Creating basic test structure..."
          mkdir -p app/src/test/java/com/ritsu/ai/assistant
          
          cat > app/src/test/java/com/ritsu/ai/assistant/MainActivityTest.kt << 'EOF'
        package com.ritsu.ai.assistant
        
        import org.junit.Test
        import org.junit.Assert.*
        
        class MainActivityTest {
            @Test
            fun testMainActivity() {
                // Basic test to ensure compilation
                assertTrue("Basic test", true)
            }
        }
        EOF
        fi
        
        # Run unit tests
        ./gradlew testDebugUnitTest --no-daemon || {
          echo "⚠️ Some unit tests failed, continuing..."
        }
        
        # Generate test report if available
        if [ -f "app/build/reports/tests/testDebugUnitTest/index.html" ]; then
          echo "📊 Unit test report generated"
        fi
        
        echo "✅ Unit tests completed"

    # ------------------------------------------------------------------------
    # ACCESSIBILITY TESTING
    # ------------------------------------------------------------------------
    - name: ♿ Accessibility Testing
      run: |
        echo "♿ Running accessibility checks..."
        
        # Check for accessibility service in manifest
        if grep -q "android.accessibilityservice" app/src/main/AndroidManifest.xml 2>/dev/null; then
          echo "✅ Accessibility service declaration found"
        else
          echo "⚠️ No accessibility service found - adding basic declaration..."
          
          # Add accessibility service to manifest if missing
          if [ -f "app/src/main/AndroidManifest.xml" ]; then
            # This is a simplified addition - in real implementation you'd need proper XML parsing
            echo "⚠️ Manual accessibility service configuration may be needed"
          fi
        fi
        
        # Check for content descriptions in layouts
        if find app/src/main/res -name "*.xml" -exec grep -l "contentDescription" {} \; 2>/dev/null | wc -l | grep -q "0"; then
          echo "⚠️ No content descriptions found - accessibility may be limited"
        else
          echo "✅ Content descriptions found in layouts"
        fi
        
        echo "✅ Accessibility testing completed"

    # ------------------------------------------------------------------------
    # SECURITY SCANNING
    # ------------------------------------------------------------------------
    - name: 🔒 Security Analysis
      run: |
        echo "🔒 Running security analysis..."
        
        # Check for sensitive permissions
        echo "🔍 Checking permissions in manifest..."
        
        SENSITIVE_PERMISSIONS=(
          "RECORD_AUDIO"
          "CALL_PHONE"
          "READ_PHONE_STATE"
          "SYSTEM_ALERT_WINDOW"
          "BIND_ACCESSIBILITY_SERVICE"
        )
        
        for permission in "${SENSITIVE_PERMISSIONS[@]}"; do
          if grep -q "$permission" app/src/main/AndroidManifest.xml 2>/dev/null; then
            echo "⚠️ Sensitive permission found: $permission"
          fi
        done
        
        # Check for hardcoded secrets (basic check)
        echo "🔍 Checking for potential hardcoded secrets..."
        if grep -r -i "password\|secret\|api_key\|token" app/src/ --include="*.kt" --include="*.java" 2>/dev/null; then
          echo "⚠️ Potential hardcoded secrets found - review required"
        else
          echo "✅ No obvious hardcoded secrets found"
        fi
        
        echo "✅ Security analysis completed"

    # ------------------------------------------------------------------------
    # BUILD DEBUG APK
    # ------------------------------------------------------------------------
    - name: 🔨 Build Debug APK
      run: |
        echo "🔨 Building debug APK..."
        
        # Clean and build
        ./gradlew clean assembleDebug --no-daemon --stacktrace
        
        # Check if APK was built successfully
        if [ -f app/build/outputs/apk/debug/*.apk ]; then
          APK_FILE=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
          APK_SIZE=$(stat -c%s "$APK_FILE")
          APK_SIZE_MB=$((APK_SIZE / 1024 / 1024))
          
          echo "✅ Debug APK built successfully!"
          echo "📱 APK: $APK_FILE"
          echo "📊 Size: ${APK_SIZE_MB} MB"
          
          # Basic APK analysis
          echo "🔍 APK Analysis:"
          unzip -l "$APK_FILE" | head -20
          
        else
          echo "❌ Failed to build debug APK"
          exit 1
        fi

    # ------------------------------------------------------------------------
    # BUILD RELEASE APK (if on main branch)
    # ------------------------------------------------------------------------
    - name: 🚀 Build Release APK
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🚀 Building release APK..."
        
        # For release build, you'd typically need signing configuration
        # For now, we'll build an unsigned release APK
        ./gradlew assembleRelease --no-daemon --stacktrace || {
          echo "⚠️ Release build failed - may need signing configuration"
          echo "Building unsigned release..."
        }
        
        if [ -f app/build/outputs/apk/release/*.apk ]; then
          echo "✅ Release APK built successfully!"
        fi

    # ------------------------------------------------------------------------
    # PERFORMANCE ANALYSIS
    # ------------------------------------------------------------------------
    - name: 📊 Performance Analysis
      run: |
        echo "📊 Running performance analysis..."
        
        # APK size analysis
        if [ -f app/build/outputs/apk/debug/*.apk ]; then
          APK_FILE=$(find app/build/outputs/apk/debug -name "*.apk" | head -1)
          
          echo "📱 APK Analysis:"
          echo "Size: $(stat -c%s "$APK_FILE" | numfmt --to=iec)"
          
          # Method count (simplified)
          echo "🔢 Estimating method count..."
          unzip -q "$APK_FILE" -d temp_apk/
          if [ -f temp_apk/classes.dex ]; then
            echo "✅ DEX file found - app should run on target devices"
          fi
          rm -rf temp_apk/
        fi
        
        # Memory usage estimation
        echo "💾 Memory analysis:"
        ./gradlew assembleDebug -Dorg.gradle.jvmargs="-Xmx2g" --no-daemon 2>&1 | grep -i "memory\|heap" || echo "Memory usage: Normal
